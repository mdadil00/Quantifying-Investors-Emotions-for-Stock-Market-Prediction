# -*- coding: utf-8 -*-
"""without_outliers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u_MIJ2mlRhz-hNFBiwbpvo-Vev4-EJ8U
"""

import pandas as pd
import statsmodels.api as sm
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Load the data from the provided Excel file
file_path = "/content/demo_us.xlsx"  # Update this path to your data file
df = pd.read_excel(file_path)

# Add previous day's return as an independent variable
df['prev_day_return'] = df['actual_return'].shift(1)

# Drop rows with missing values due to shifting
df = df.dropna()

# Remove outliers using the IQR method
def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]

# Apply the outlier removal function to the 'actual_return' column
df = remove_outliers(df, 'actual_return')

# Define the independent variables (Emotion metrics, previous day's return, and control variables)
emotion_columns = ['happy', 'sad', 'anger', 'disgust', 'surprise', 'fear']
control_columns = ['prev_return', 'twenty_day_return', 'volatility']
independent_vars = emotion_columns + ['prev_day_return'] + control_columns

# Define the dependent variable (actual return)
Y = df['actual_return']

# Add a constant to the independent variables matrix (intercept)
X = df[independent_vars]
X = sm.add_constant(X)

# Fit the simple OLS model
ols_model = sm.OLS(Y, X)
ols_results = ols_model.fit()

# Print the summary of the OLS regression model
print("\nOLS Regression Results:")
print(ols_results.summary())

# Predict the values for OLS
df['predicted_return_ols'] = ols_results.predict(X)

# Calculate R-squared manually for the OLS model
sst_ols = ((Y - Y.mean()) ** 2).sum()
ssr_ols = ((Y - df['predicted_return_ols']) ** 2).sum()
r_squared_ols = 1 - (ssr_ols / sst_ols)

print(f"Calculated R-squared for OLS: {r_squared_ols}")

# Calculate the correlation between actual and predicted values
correlation = df['actual_return'].corr(df['predicted_return_ols'])
print(f"Correlation between actual and predicted values: {correlation}")

# Calculate MAE, MSE, and RMSE
mae = mean_absolute_error(df['actual_return'], df['predicted_return_ols'])
mse = mean_squared_error(df['actual_return'], df['predicted_return_ols'])
rmse = mean_squared_error(df['actual_return'], df['predicted_return_ols'], squared=False)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")

# Save the predictions to a new Excel file
output_file_path = "/content/hypothetical_data_with_predictions.xlsx"
df.to_excel(output_file_path, index=False)

output_file_path

"""# New section"""